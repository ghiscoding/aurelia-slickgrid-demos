"use strict";(self.webpackChunkaurelia_slickgrid_demo_bs5=self.webpackChunkaurelia_slickgrid_demo_bs5||[]).push([[55],{65055:(e,t,i)=>{i.r(t),i.d(t,{Example16:()=>g});var n={};i.r(n),i.d(n,{default:()=>r,dependencies:()=>s,name:()=>a,register:()=>c,template:()=>l});var o=i(71542);const a="example16",l='<template>\n  <h2>\n    ${title}\n    <span class="float-end">\n      <a style="font-size: 18px"\n         target="_blank"\n         href="https://github.com/ghiscoding/aurelia-slickgrid/blob/master/src/examples/slickgrid/example16.ts">\n        <span class="fa fa-link"></span> code\n      </a>\n    </span>\n  </h2>\n  <div class="subtitle"\n       innerhtml.bind="subTitle"></div>\n\n  <div class="row">\n    <div class="col-sm-12">\n      <button class="btn btn-outline-secondary btn-sm" data-test="hide-duration-btn"\n              click.trigger="hideDurationColumnDynamically()">\n        <i class="fa fa-eye-slash"></i>\n        Dynamically Hide "Duration"\n      </button>\n      <button class="btn btn-outline-secondary btn-sm" data-test="disable-filters-btn"\n              click.trigger="disableFilters()">\n        <i class="fa fa-times"></i>\n        Disable Filters\n      </button>\n      <button class="btn btn-outline-secondary btn-sm" data-test="disable-sorting-btn"\n              click.trigger="disableSorting()">\n        <i class="fa fa-times"></i>\n        Disable Sorting\n      </button>\n      <button class="btn btn-outline-secondary btn-sm" data-test="toggle-filtering-btn" click.trigger="toggleFilter()">\n        <i class="fa fa-random"></i>\n        Toggle Filtering\n      </button>\n      <button class="btn btn-outline-secondary btn-sm" data-test="toggle-sorting-btn" click.trigger="toggleSorting()">\n        <i class="fa fa-random"></i>\n        Toggle Sorting\n      </button>\n      <button class="btn btn-outline-secondary btn-sm" data-test="add-crud-columns-btn" click.trigger="addEditDeleteColumns()">\n        <i class="fa fa-plus"></i>\n        Add Edit/Delete Columns\n      </button>\n    </div>\n  </div>\n\n  <br />\n\n  <aurelia-slickgrid grid-id="grid16"\n                     column-definitions.bind="columnDefinitions"\n                     grid-options.bind="gridOptions"\n                     dataset.bind="dataset"\n                     on-aurelia-grid-created.trigger="aureliaGridReady($event.detail)">\n  </aurelia-slickgrid>\n</template>\n',r=l,s=[];let d;function c(e){d||(d=o.b_N.define({name:a,template:l,dependencies:s})),e.register(d)}var u=i(2249),f=(i(31932),function(e,t,i,n){var o,a=arguments.length,l=a<3?t:null===n?n=Object.getOwnPropertyDescriptor(t,i):n;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)l=Reflect.decorate(e,t,i,n);else for(var r=e.length-1;r>=0;r--)(o=e[r])&&(l=(a<3?o(l):a>3?o(t,i,l):o(t,i))||l);return a>3&&l&&Object.defineProperty(t,i,l),l});let g=class{constructor(){this.title="Example 16: Row Move & Checkbox Selector",this.subTitle='\n    This example demonstrates using the <b>Slick.Plugins.RowMoveManager</b> plugin to easily move a row in the grid.<br/>\n    <ul>\n      <li>Click to select, Ctrl+Click to toggle selection, Shift+Click to select a range.</li>\n      <li>Drag one or more rows by the handle (icon) to reorder</li>\n      <li>If you plan to use Row Selection + Row Move, then use "singleRowMove: true" and "disableRowSelection: true"</li>\n      <li>You can change "columnIndexPosition" to move the icon position of any extension (RowMove, RowDetail or RowSelector icon)</li>\n      <ul>\n        <li>You will also want to enable the DataView "syncGridSelection: true" to keep row selection even after a row move</li>\n      </ul>\n      <li>If you plan to use only Row Move, then you could keep default values (or omit them completely) of "singleRowMove: false" and "disableRowSelection: false"</li>\n      <ul>\n        <li>SingleRowMove has the name suggest will only move 1 row at a time, by default it will move any row(s) that are selected unless you disable the flag</li>\n      </ul>\n    </ul>\n  ',this.columnDefinitions=[],this.dataset=[],this.defineGrid()}aureliaGridReady(e){this.aureliaGrid=e}get rowMoveInstance(){return this.aureliaGrid?.extensionService.getExtensionInstanceByName(u.UXi.rowMoveManager)}attached(){this.getData()}defineGrid(){this.columnDefinitions=[{id:"title",name:"Title",field:"title",filterable:!0},{id:"duration",name:"Duration",field:"duration",filterable:!0,sortable:!0},{id:"%",name:"% Complete",field:"percentComplete",filterable:!0,sortable:!0},{id:"start",name:"Start",field:"start",filterable:!0,sortable:!0,filter:{model:u.x$p.compoundDate}},{id:"finish",name:"Finish",field:"finish",filterable:!0,sortable:!0,filter:{model:u.x$p.compoundDate}},{id:"effort-driven",name:"Completed",field:"effortDriven",formatter:u.UgU.checkmark,filterable:!0,sortable:!0,filter:{collection:[{value:"",label:""},{value:!0,label:"True"},{value:!1,label:"False"}],model:u.x$p.singleSelect}}],this.gridOptions={enableAutoResize:!0,autoResize:{container:"#demo-container",rightPadding:10},enableFiltering:!0,enableCheckboxSelector:!0,checkboxSelector:{hideSelectAllCheckbox:!1,columnIndexPosition:1,hideInFilterHeaderRow:!1,hideInColumnTitleRow:!0},enableRowSelection:!0,rowSelectionOptions:{selectActiveRow:!1},dataView:{syncGridSelection:!0},enableRowMoveManager:!0,rowMoveManager:{columnIndexPosition:0,singleRowMove:!0,disableRowSelection:!0,cancelEditOnDrag:!0,hideRowMoveShadow:!1,width:30,onBeforeMoveRows:this.onBeforeMoveRow.bind(this),onMoveRows:this.onMoveRows.bind(this)},showCustomFooter:!0,presets:{rowSelection:{dataContextIds:[1,2,6,7]}}}}getData(){const e=[];for(let t=0;t<500;t++)e[t]={id:t,title:"Task "+t,duration:Math.round(25*Math.random())+" days",percentComplete:Math.round(100*Math.random()),start:"01/01/2009",finish:"01/05/2009",effortDriven:t%5==0};this.dataset=e}onBeforeMoveRow(e,t){for(const i of t.rows)if(i===t.insertBefore||i===t.insertBefore-1&&t.insertBefore-1!==this.aureliaGrid.dataView.getItemCount())return e.stopPropagation(),!1;return!0}onMoveRows(e,t){const i=t.rows,n=t.insertBefore,o=[];this.aureliaGrid.dataView.sort(void 0,!0);const a=this.aureliaGrid.dataView.getItems(),l=this.aureliaGrid.dataView.getFilteredItems(),r=this.aureliaGrid.dataView.getItem(n),s=r?this.aureliaGrid.dataView.getIdxById(r.id):this.aureliaGrid.dataView.getItemCount(),d=[];i.forEach((e=>d.push(l[e])));const c=d.map((e=>this.aureliaGrid.dataView.getIdxById(e.id))),u=a.slice(0,s),f=a.slice(s,a.length);i.sort(((e,t)=>e-t));for(const e of c)e&&o.push(a[e]);c.reverse();for(const e of c)void 0!==e&&void 0!==s&&(e<s?u.splice(e,1):f.splice(e-s,1));const g=u.concat(o.concat(f));this.dataset=g}hideDurationColumnDynamically(){this.aureliaGrid.gridService.hideColumnById("duration")}disableFilters(){this.aureliaGrid.filterService.disableFilterFunctionality(!0)}disableSorting(){this.aureliaGrid.sortService.disableSortFunctionality(!0)}addEditDeleteColumns(){if("change-symbol"!==this.columnDefinitions[0].id){const e=[{id:"change-symbol",field:"id",excludeFromColumnPicker:!0,excludeFromGridMenu:!0,excludeFromHeaderMenu:!0,formatter:u.UgU.icon,params:{iconCssClass:"fa fa-pencil pointer"},minWidth:30,maxWidth:30,onCellClick:(e,t)=>{alert(`Technically we should Edit "Task ${t.dataContext.id}"`)}},{id:"delete-symbol",field:"id",excludeFromColumnPicker:!0,excludeFromGridMenu:!0,excludeFromHeaderMenu:!0,formatter:u.UgU.icon,params:{iconCssClass:"fa fa-trash pointer"},minWidth:30,maxWidth:30,onCellClick:(e,t)=>{confirm("Are you sure?")&&this.aureliaGrid.gridService.deleteItemById(t.dataContext.id)}}],t=this.aureliaGrid.gridService.getAllColumnDefinitions();t.unshift(e[0],e[1]),this.columnDefinitions=[...t]}}toggleFilter(){this.aureliaGrid.filterService.toggleFilterFunctionality()}toggleSorting(){this.aureliaGrid.sortService.toggleSortFunctionality()}};g=f([(0,o.MoW)(n),function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)}("design:paramtypes",[])],g)}}]);