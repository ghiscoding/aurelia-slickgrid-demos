"use strict";(self.webpackChunkaurelia_slickgrid_demo_bs5=self.webpackChunkaurelia_slickgrid_demo_bs5||[]).push([[711],{78708:(e,t,i)=>{i.d(t,{Z:()=>o});var a=i(8081),n=i.n(a),l=i(23645),r=i.n(l)()(n());r.push([e.id,".alert{padding:8px;margin-bottom:10px}.col-sm-1{max-width:70px}",""]);const o=r},49711:(e,t,i)=>{i.r(t),i.d(t,{Example10:()=>C});var a={};i.r(a),i.d(a,{default:()=>s,dependencies:()=>d,name:()=>r,register:()=>g,template:()=>o});var n=i(71542),l=i(78708);const r="example10",o='<h2>\n  ${title}\n  <span class="float-end">\n    <a style="font-size: 18px"\n        target="_blank"\n        href="https://github.com/ghiscoding/aurelia-slickgrid/blob/master/packages/demo/src/examples/slickgrid/example10.ts">\n      <span class="fa fa-link"></span> code\n    </a>\n  </span>\n</h2>\n<div class="subtitle"\n      innerhtml.bind="subTitle"></div>\n\n<div class="row">\n  <div class="col-sm-4" style="max-width: 175px;">\n    Pagination\n    <button class="btn btn-outline-secondary btn-xs px-2" data-test="goto-first-page"\n            click.trigger="goToGrid1FirstPage()">\n      <i class="fa fa-caret-left fa-lg"></i>\n    </button>\n    <button class="btn btn-outline-secondary btn-xs px-2" data-test="goto-last-page" click.trigger="goToGrid1LastPage()">\n      <i class="fa fa-caret-right fa-lg"></i>\n    </button>\n  </div>\n  <div class="col-sm-8">\n    <div class="alert alert-success">\n      <strong>(single select) Selected Row:</strong>\n      <span innerhtml.bind="selectedTitle"\n            data-test="grid1-selections"></span>\n    </div>\n  </div>\n</div>\n\n<div class="overflow-hidden">\n  <aurelia-slickgrid grid-id="grid1"\n                      column-definitions.bind="columnDefinitions1"\n                      grid-options.bind="gridOptions1"\n                      dataset.bind="dataset1"\n                      on-aurelia-grid-created.trigger="aureliaGrid1Ready($event.detail)"\n                      on-grid-state-changed.trigger="grid1StateChanged($event.detail)"\n                      on-selected-rows-changed.trigger="onGrid1SelectedRowsChanged($event.detail.eventData, $event.detail.args)">\n  </aurelia-slickgrid>\n</div>\n\n<hr class="col-md-6 offset-md-1">\n\n<div class="row">\n  <div class="col-sm-4 col-md-3" style="max-width: 190px;">\n    <label for="enableGrid2Pagination">\n      Pagination:\n      <input type="checkbox" id="enableGrid2Pagination"\n              checked.bind="isGrid2WithPagination"\n              data-test="toggle-pagination-grid2" />\n    </label>\n    <span style="margin-left: 5px" if.bind="isGrid2WithPagination">\n      <button class="btn btn-outline-secondary btn-xs px-2" data-test="goto-first-page"\n              click.trigger="goToGrid2FirstPage()">\n        <i class="fa fa-caret-left fa-lg"></i>\n      </button>\n      <button class="btn btn-outline-secondary btn-xs px-2" data-test="goto-last-page"\n              click.trigger="goToGrid2LastPage()">\n        <i class="fa fa-caret-right fa-lg"></i>\n      </button>\n    </span>\n  </div>\n  <div class="col-sm-8">\n    <div class="alert alert-success">\n      <strong>(multi-select) Selected Row(s):</strong>\n      <span innerhtml.bind="selectedTitles"\n            data-test="grid2-selections"></span>\n    </div>\n  </div>\n</div>\n\n<div class="overflow-hidden">\n  <aurelia-slickgrid grid-id="grid2"\n                      column-definitions.bind="columnDefinitions2"\n                      grid-options.bind="gridOptions2"\n                      dataset.bind="dataset2"\n                      on-aurelia-grid-created.trigger="aureliaGrid2Ready($event.detail)"\n                      on-grid-state-changed.trigger="grid2StateChanged($event.detail)">\n  </aurelia-slickgrid>\n</div>\n',s=o,d=[];let c;function g(e){c||(c=n.b_N.define({name:r,template:o,dependencies:d})),e.register(c)}var f=i(38845),p=i(93379),h=i.n(p),u=i(7795),b=i.n(u),m=i(90569),v=i.n(m),S=i(3565),y=i.n(S),k=i(19216),x=i.n(k),G=i(44589),w=i.n(G),P={};P.styleTagTransform=w(),P.setAttributes=y(),P.insert=v().bind(null,"head"),P.domAPI=b(),P.insertStyleElement=x(),h()(l.Z,P),l.Z&&l.Z.locals&&l.Z.locals,i(31932);var D=function(e,t,i,a){var n,l=arguments.length,r=l<3?t:null===a?a=Object.getOwnPropertyDescriptor(t,i):a;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)r=Reflect.decorate(e,t,i,a);else for(var o=e.length-1;o>=0;o--)(n=e[o])&&(r=(l<3?n(r):l>3?n(t,i,r):n(t,i))||r);return l>3&&r&&Object.defineProperty(t,i,r),r},T=function(e,t){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(e,t)};let C=class{constructor(){this.title="Example 10: Multiple Grids with Row Selection",this.subTitle='\n    Row selection, single or multi-select (<a href="https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/row-selection" target="_blank">Wiki docs</a>).\n    <ul>\n      <li>Single Select, you can click on any cell to make the row active</li>\n      <li>Multiple Selections, you need to specifically click on the checkbox to make 1 or more selections</li>\n      <li>NOTE: Any Row Selection(s) will be reset when using Pagination and changing Page (you will need to set it back manually if you want it back)</li>\n    </ul>\n  ',this.isGrid2WithPagination=!0,this.columnDefinitions1=[],this.columnDefinitions2=[],this.dataset1=[],this.dataset2=[],this.selectedTitles="",this.selectedTitle="",this.selectedGrid2IDs=[],this.defineGrids()}attached(){this.dataset1=this.prepareData(495),this.dataset2=this.prepareData(525)}aureliaGrid1Ready(e){this.aureliaGrid1=e}aureliaGrid2Ready(e){this.aureliaGrid2=e}defineGrids(){this.columnDefinitions1=[{id:"title",name:"Title",field:"title",sortable:!0,type:f.fSu.string,filterable:!0},{id:"duration",name:"Duration (days)",field:"duration",sortable:!0,type:f.fSu.number,filterable:!0},{id:"complete",name:"% Complete",field:"percentComplete",formatter:f.UgU.percentCompleteBar,type:f.fSu.number,filterable:!0,sortable:!0},{id:"start",name:"Start",field:"start",formatter:f.UgU.dateIso,exportWithFormatter:!0,type:f.fSu.date,filterable:!0,sortable:!0,filter:{model:f.x$p.compoundDate}},{id:"finish",name:"Finish",field:"finish",formatter:f.UgU.dateIso,exportWithFormatter:!0,type:f.fSu.date,filterable:!0,sortable:!0,filter:{model:f.x$p.compoundDate}},{id:"effort-driven",name:"Effort Driven",field:"effortDriven",formatter:f.UgU.checkmark,type:f.fSu.boolean,sortable:!0,filterable:!0,filter:{collection:[{value:"",label:""},{value:!0,label:"true"},{value:!1,label:"false"}],model:f.x$p.singleSelect}}],this.columnDefinitions2=[{id:"title",name:"Title",field:"title",sortable:!0,type:f.fSu.string,filterable:!0},{id:"duration",name:"Duration (days)",field:"duration",sortable:!0,type:f.fSu.number,filterable:!0},{id:"complete",name:"% Complete",field:"percentComplete",formatter:f.UgU.percentCompleteBar,type:f.fSu.number,filterable:!0,sortable:!0},{id:"start",name:"Start",field:"start",formatter:f.UgU.dateIso,exportWithFormatter:!0,type:f.fSu.date,filterable:!0,sortable:!0,filter:{model:f.x$p.compoundDate}},{id:"finish",name:"Finish",field:"finish",formatter:f.UgU.dateIso,exportWithFormatter:!0,type:f.fSu.date,filterable:!0,sortable:!0,filter:{model:f.x$p.compoundDate}},{id:"effort-driven",name:"Effort Driven",field:"effortDriven",formatter:f.UgU.checkmark,type:f.fSu.boolean,sortable:!0,filterable:!0,filter:{collection:[{value:"",label:""},{value:!0,label:"true"},{value:!1,label:"false"}],model:f.x$p.singleSelect}}],this.gridOptions1={enableAutoResize:!1,enableCellNavigation:!0,enableRowSelection:!0,enableCheckboxSelector:!0,enableFiltering:!0,checkboxSelector:{hideSelectAllCheckbox:!0},multiSelect:!1,rowSelectionOptions:{selectActiveRow:!0},columnPicker:{hideForceFitButton:!0},gridMenu:{hideForceFitButton:!0},gridHeight:225,gridWidth:800,enablePagination:!0,pagination:{pageSizes:[5,10,15,20,25,50,75,100],pageSize:5},presets:{pagination:{pageNumber:2,pageSize:5}}},this.gridOptions2={enableAutoResize:!1,enableCellNavigation:!0,enableFiltering:!0,checkboxSelector:{hideInFilterHeaderRow:!1,hideInColumnTitleRow:!0,applySelectOnAllPages:!0},rowSelectionOptions:{selectActiveRow:!1},enableCheckboxSelector:!0,enableRowSelection:!0,gridHeight:255,gridWidth:800,enablePagination:!0,pagination:{pageSizes:[5,10,15,20,25,50,75,100],pageSize:5},presets:{rowSelection:{dataContextIds:[3,12,13,522]}}}}prepareData(e){const t=[];for(let i=0;i<e;i++){const e=2e3+Math.floor(10*Math.random()),a=Math.floor(11*Math.random()),n=Math.floor(29*Math.random()),l=Math.round(100*Math.random());t[i]={id:i,title:"Task "+i,duration:Math.round(100*Math.random())+"",percentComplete:l,percentCompleteNumber:l,start:new Date(e,a,n),finish:new Date(e,a+1,n),effortDriven:i%5==0}}return t}goToGrid1FirstPage(){this.aureliaGrid1.paginationService.goToFirstPage()}goToGrid1LastPage(){this.aureliaGrid1.paginationService.goToLastPage()}goToGrid2FirstPage(){this.aureliaGrid2.paginationService.goToFirstPage()}goToGrid2LastPage(){this.aureliaGrid2.paginationService.goToLastPage()}grid1StateChanged(e){console.log("Grid State changed:: ",e),console.log("Grid State changed:: ",e.change)}grid2StateChanged(e){console.log("Grid State changed:: ",e),console.log("Grid State changed:: ",e.change),e.gridState.rowSelection&&(this.selectedGrid2IDs=e.gridState.rowSelection.filteredDataContextIds||[],this.selectedGrid2IDs=this.selectedGrid2IDs.sort(((e,t)=>e-t)),this.selectedTitles=this.selectedGrid2IDs.map((e=>`Task ${e}`)).join(","),this.selectedTitles.length>293&&(this.selectedTitles=this.selectedTitles.substring(0,293)+"..."))}isGrid2WithPaginationChanged(){this.aureliaGrid2.paginationService.togglePaginationVisibility(this.isGrid2WithPagination)}onGrid1SelectedRowsChanged(e,t){const i=t&&t.grid;Array.isArray(t.rows)&&(this.selectedTitle=t.rows.map((e=>{const t=i.getDataItem(e);return t&&t.title||""})))}};D([(0,n.ExJ)(),T("design:type",Object)],C.prototype,"isGrid2WithPagination",void 0),C=D([(0,n.MoW)(a),T("design:paramtypes",[])],C)}}]);