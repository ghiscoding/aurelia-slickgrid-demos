"use strict";(self.webpackChunkau_slickgrid_demo=self.webpackChunkau_slickgrid_demo||[]).push([[3916],{3916:(e,t,n)=>{n.r(t),n.d(t,{Example18:()=>h});var r={};n.r(r),n.d(r,{bindables:()=>d,default:()=>s,dependencies:()=>l,name:()=>i,register:()=>u,template:()=>a});var o=n(5394);const i="example18",a='<h2>\n  ${title}\n  <span class="float-end">\n    <a\n      style="font-size: 18px"\n      target="_blank"\n      href="https://github.com/ghiscoding/slickgrid-universal/blob/master/demos/aurelia/src/examples/slickgrid/example18.ts"\n    >\n      <span class="mdi mdi-link-variant"></span> code\n    </a>\n  </span>\n  <button class="ms-2 btn btn-outline-secondary btn-sm btn-icon" type="button" data-test="toggle-subtitle" click.trigger="toggleSubTitle()">\n    <span class="mdi mdi-information-outline" title="Toggle example sub-title details"></span>\n  </button>\n  <button class="btn btn-outline-secondary btn-sm btn-icon" click.trigger="toggleDarkMode()" data-test="toggle-dark-mode">\n    <span class="mdi mdi-theme-light-dark"></span>\n    <span>Toggle Dark Mode</span>\n  </button>\n</h2>\n\n<div class="subtitle" innerhtml.bind="subTitle"></div>\n\n<div class="form-inline">\n  <div class="row">\n    <div class="col-sm-12">\n      <button class="btn btn-outline-secondary btn-xs btn-icon" data-test="add-500-rows-btn" click.trigger="loadData(500)">500 rows</button>\n      <button class="btn btn-outline-secondary btn-xs btn-icon" data-test="add-50k-rows-btn" click.trigger="loadData(50000)">\n        50k rows\n      </button>\n      <button class="btn btn-outline-secondary btn-xs btn-icon" data-test="clear-grouping-btn" click.trigger="clearGroupsAndSelects()">\n        <i class="mdi mdi-close"></i> Clear grouping\n      </button>\n      <button class="btn btn-outline-secondary btn-xs btn-icon" data-test="collapse-all-btn" click.trigger="collapseAllGroups()">\n        <i class="mdi mdi-arrow-collapse"></i> Collapse all groups\n      </button>\n      <button class="btn btn-outline-secondary btn-xs btn-icon" data-test="expand-all-btn" click.trigger="expandAllGroups()">\n        <i class="mdi mdi-arrow-expand"></i> Expand all groups\n      </button>\n      <button\n        class="btn btn-outline-secondary btn-xs btn-icon"\n        data-test="toggle-draggable-grouping-row"\n        click.trigger="toggleDraggableGroupingRow()"\n      >\n        Toggle Draggable Grouping Row\n      </button>\n      <button class="btn btn-outline-secondary btn-xs btn-icon" click.trigger="exportToExcel()">\n        <i class="mdi mdi-file-excel-outline text-success"></i> Export to Excel\n      </button>\n    </div>\n  </div>\n\n  <div class="row">\n    <div class="col-sm-12">\n      <button\n        class="btn btn-outline-secondary btn-xs btn-icon"\n        data-test="group-duration-sort-value-btn"\n        click.trigger="groupByDurationOrderByCount(false)"\n      >\n        Group by duration &amp; sort groups by value\n      </button>\n      <button\n        class="btn btn-outline-secondary btn-xs btn-icon"\n        data-test="group-duration-sort-count-btn"\n        click.trigger="groupByDurationOrderByCount(true)"\n      >\n        Group by duration &amp; sort groups by count\n      </button>\n      <button\n        class="btn btn-outline-secondary btn-xs btn-icon"\n        data-test="group-duration-effort-btn"\n        click.trigger="groupByDurationEffortDriven()"\n      >\n        Group by Duration then Effort-Driven\n      </button>\n      <button class="btn btn-outline-secondary btn-xs btn-icon" data-test="set-dynamic-filter" click.trigger="setFiltersDynamically()">\n        <span class="mdi mdi-filter-outline"></span>\n        <span> Set Filters Dynamically </span>\n      </button>\n      <button class="btn btn-outline-secondary btn-xs btn-icon" data-test="set-dynamic-sorting" click.trigger="setSortingDynamically()">\n        <span class="mdi mdi-sort-ascending"></span>\n        <span> Set Sorting Dynamically </span>\n      </button>\n    </div>\n  </div>\n\n  <div class="row mt-2">\n    <div class="col-sm-12">\n      <div class="form-row">\n        <div class="row form-group">\n          <label for="field1" class="col-sm-3 mb-2">Group by field(s)</label>\n          <div class="form-group col-md-3 grouping-selects" repeat.for="groupField of selectedGroupingFields">\n            <select class="form-select" change.trigger="groupByFieldName()" value.bind="groupField">\n              <option model.bind="\'\'">...</option>\n              <option model.bind="column.id" repeat.for="column of columnDefinitions">${column.name}</option>\n            </select>\n          </div>\n        </div>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div class="row mt-1 mb-1">\n  <hr />\n</div>\n\n<aurelia-slickgrid\n  grid-id="grid18"\n  columns.bind="columnDefinitions"\n  options.bind="gridOptions"\n  dataset.bind="dataset"\n  on-aurelia-grid-created.trigger="aureliaGridReady($event.detail)"\n>\n</aurelia-slickgrid>\n',s=a,l=[],d={};let c;function u(e){c||(c=o.K9.define({name:i,template:a,dependencies:l,bindables:d})),e.register(c)}var g=n(6407),p=n(2484),m=n(5895),b=(n(6757),function(e,t,n,r,o,i){function a(e){if(void 0!==e&&"function"!=typeof e)throw new TypeError("Function expected");return e}for(var s,l=r.kind,d="getter"===l?"get":"setter"===l?"set":"value",c=!t&&e?r.static?e:e.prototype:null,u=t||(c?Object.getOwnPropertyDescriptor(c,r.name):{}),g=!1,p=n.length-1;p>=0;p--){var m={};for(var b in r)m[b]="access"===b?{}:r[b];for(var b in r.access)m.access[b]=r.access[b];m.addInitializer=function(e){if(g)throw new TypeError("Cannot add initializers after decoration has completed");i.push(a(e||null))};var h=(0,n[p])("accessor"===l?{get:u.get,set:u.set}:u[d],m);if("accessor"===l){if(void 0===h)continue;if(null===h||"object"!=typeof h)throw new TypeError("Object expected");(s=a(h.get))&&(u.get=s),(s=a(h.set))&&(u.set=s),(s=a(h.init))&&o.unshift(s)}else(s=a(h))&&("field"===l?o.unshift(s):u[d]=s)}c&&Object.defineProperty(c,r.name,u),g=!0});let h=(()=>{let e,t,n=[(0,o.EM)(r)],i=[];return t=class{constructor(){this._darkMode=!1,this.title="Example 18: Draggable Grouping & Aggregators",this.subTitle='\n  <ul>\n  <li><a href="https://ghiscoding.gitbook.io/aurelia-slickgrid/grid-functionalities/grouping-aggregators" target="_blank">Wiki docs</a></li>\n  <li>This example shows 3 ways of grouping</li>\n  <ol>\n  <li>Drag any Column Header on the top placeholder to group by that column (support moti-columns grouping by adding more columns to the drop area).</li>\n  <li>Use buttons and defined functions to group by whichever field you want</li>\n  <li>Use the Select dropdown to group, the position of the Selects represent the grouping level</li>\n  </ol>\n  <li>Fully dynamic and interactive multi-level grouping with filtering and aggregates ovor 50\'000 items</li>\n  <li>Each grouping level can have its own aggregates (over child rows, child groups, or all descendant rows)..</li>\n  <li>Use "Aggregators" and "GroupTotalFormatters" directly from Aurelia-Slickgrid</li>\n  </ul>\n  ',this.columnDefinitions=[],this.dataset=[],this.durationOrderByCount=!1,this.hideSubTitle=!1,this.processing=!1,this.selectedGroupingFields=["","",""],this.excelExportService=new g.N,this.textExportService=new p.f,this.loadData(500),this.defineGrid()}aureliaGridReady(e){this.aureliaGrid=e,this.gridObj=e.slickGrid,this.dataviewObj=e.dataView}detaching(){document.querySelector(".panel-wm-content").classList.remove("dark-mode"),document.querySelector("#demo-container").dataset.bsTheme="light"}defineGrid(){this.columnDefinitions=[{id:"title",name:"Title",field:"title",columnGroup:"Common Factor",width:70,minWidth:50,cssClass:"cell-title",filterable:!0,sortable:!0,grouping:{getter:"title",formatter:e=>`Title: ${e.value}  <span class="text-primary">(${e.count} items)</span>`,aggregators:[new m.J2q.Sum("cost")],aggregateCollapsed:!1,collapsed:!1}},{id:"duration",name:"Duration",field:"duration",columnGroup:"Common Factor",width:70,sortable:!0,filterable:!0,filter:{model:m.CuW.slider,operator:">="},type:"number",groupTotalsFormatter:m.tao.sumTotals,grouping:{getter:"duration",formatter:e=>`Duration: ${e.value}  <span class="text-primary">(${e.count} items)</span>`,comparer:(e,t)=>this.durationOrderByCount?e.count-t.count:m.Luy.numeric(e.value,t.value,m.Lo1.asc),aggregators:[new m.J2q.Sum("cost")],aggregateCollapsed:!1,collapsed:!1}},{id:"start",name:"Start",field:"start",columnGroup:"Period",minWidth:60,sortable:!0,filterable:!0,filter:{model:m.CuW.compoundDate},formatter:m._tQ.dateIso,type:"dateUtc",outputType:"dateIso",exportWithFormatter:!0,grouping:{getter:"start",formatter:e=>`Start: ${e.value}  <span class="text-primary">(${e.count} items)</span>`,aggregators:[new m.J2q.Sum("cost")],aggregateCollapsed:!1,collapsed:!1}},{id:"finish",name:"Finish",field:"finish",columnGroup:"Period",minWidth:60,sortable:!0,filterable:!0,filter:{model:m.CuW.compoundDate},formatter:m._tQ.dateIso,type:"dateUtc",outputType:"dateIso",exportWithFormatter:!0,grouping:{getter:"finish",formatter:e=>`Finish: ${e.value} <span class="text-primary">(${e.count} items)</span>`,aggregators:[new m.J2q.Sum("cost")],aggregateCollapsed:!1,collapsed:!1}},{id:"cost",name:"Cost",field:"cost",columnGroup:"Analysis",width:90,sortable:!0,filterable:!0,filter:{model:m.CuW.compoundInput},formatter:m._tQ.dollar,exportWithFormatter:!0,groupTotalsFormatter:m.tao.sumTotalsDollar,type:"number",grouping:{getter:"cost",formatter:e=>`Cost: ${e.value} <span class="text-primary">(${e.count} items)</span>`,aggregators:[new m.J2q.Sum("cost")],aggregateCollapsed:!0,collapsed:!0}},{id:"percentComplete",name:"% Complete",field:"percentComplete",columnGroup:"Analysis",minWidth:70,width:90,formatter:m._tQ.percentCompleteBar,type:"number",filterable:!0,filter:{model:m.CuW.compoundSlider},sortable:!0,groupTotalsFormatter:m.tao.avgTotalsPercentage,grouping:{getter:"percentComplete",formatter:e=>`% Complete: ${e.value}  <span class="text-primary">(${e.count} items)</span>`,aggregators:[new m.J2q.Sum("cost")],aggregateCollapsed:!1,collapsed:!1},params:{groupFormatterPrefix:"<i>Avg</i>: "}},{id:"effortDriven",name:"Effort-Driven",field:"effortDriven",columnGroup:"Analysis",width:80,minWidth:20,maxWidth:100,cssClass:"cell-effort-driven",sortable:!0,filterable:!0,filter:{collection:[{value:"",label:""},{value:!0,label:"True"},{value:!1,label:"False"}],model:m.CuW.singleSelect},formatter:m._tQ.checkmarkMaterial,grouping:{getter:"effortDriven",formatter:e=>`Effort-Driven: ${e.value?"True":"False"} <span class="text-primary">(${e.count} items)</span>`,aggregators:[new m.J2q.Sum("cost")],collapsed:!1}}],this.gridOptions={autoResize:{container:"#demo-container",rightPadding:10},enableDraggableGrouping:!0,createPreHeaderPanel:!0,showPreHeaderPanel:!0,preHeaderPanelHeight:30,createTopHeaderPanel:!0,showTopHeaderPanel:!0,topHeaderPanelHeight:35,showCustomFooter:!0,enableFiltering:!0,enableSorting:!0,enableColumnReorder:!0,gridMenu:{onCommand:(e,t)=>{"toggle-preheader"===t.command&&this.clearGrouping()}},draggableGrouping:{dropPlaceHolderText:"Drop a column header here to group by the column",deleteIconCssClass:"mdi mdi-close text-color-danger",sortAscIconCssClass:"mdi mdi-arrow-up",sortDescIconCssClass:"mdi mdi-arrow-down",onGroupChanged:(e,t)=>this.onGroupChanged(t),onExtensionRegistered:e=>this.draggableGroupingPlugin=e},darkMode:this._darkMode,enableTextExport:!0,enableExcelExport:!0,excelExportOptions:{sanitizeDataExport:!0},textExportOptions:{sanitizeDataExport:!0},externalResources:[this.excelExportService,this.textExportService]}}loadData(e){const t=[];for(let n=0;n<e;n++){const e=2e3+Math.floor(10*Math.random()),r=Math.floor(11*Math.random()),o=Math.floor(29*Math.random()),i=Math.round(100*Math.random()),a=Math.round(1e4*Math.random())/100;t[n]={id:"id_"+n,num:n,title:"Task "+n,duration:Math.round(100*Math.random())+"",percentComplete:i,percentCompleteNumber:i,start:new Date(e,r,o),finish:new Date(e,r+1,o),cost:n%33==0?-a:a,effortDriven:n%5==0}}this.dataset=t}clearGroupsAndSelects(){this.clearGroupingSelects(),this.clearGrouping()}clearGroupingSelects(){this.selectedGroupingFields.forEach(((e,t)=>this.selectedGroupingFields[t]="")),this.selectedGroupingFields=[...this.selectedGroupingFields]}clearGrouping(e=!0){this.draggableGroupingPlugin?.clearDroppedGroups(),e&&this.gridObj?.invalidate()}collapseAllGroups(){this.dataviewObj.collapseAllGroups()}expandAllGroups(){this.dataviewObj.expandAllGroups()}exportToExcel(){this.excelExportService.exportToExcel({filename:"Export",format:"xlsx"})}groupByDurationOrderByCount(e=!1){if(this.durationOrderByCount=e,this.clearGrouping(!1),this.draggableGroupingPlugin?.setDroppedGroups){this.showPreHeader(),this.draggableGroupingPlugin.setDroppedGroups("duration");const t=e?[]:[{columnId:"duration",sortAsc:!0}];this.gridObj?.setSortColumns(t),this.gridObj?.invalidate()}}groupByDurationEffortDriven(){this.clearGrouping(!1),this.draggableGroupingPlugin?.setDroppedGroups&&(this.showPreHeader(),this.draggableGroupingPlugin.setDroppedGroups(["duration","effortDriven"]),this.gridObj?.invalidate())}groupByFieldName(){if(this.clearGrouping(),this.draggableGroupingPlugin&&this.draggableGroupingPlugin.setDroppedGroups){this.showPreHeader();const e=this.selectedGroupingFields.filter((e=>""!==e));0===e.length?this.clearGrouping():this.draggableGroupingPlugin.setDroppedGroups(e),this.gridObj.invalidate()}}onGroupChanged(e){const t=e?.caller??[],n=e?.groupColumns??[];Array.isArray(this.selectedGroupingFields)&&Array.isArray(n)&&n.length>0?(this.selectedGroupingFields.forEach(((e,t)=>this.selectedGroupingFields[t]=n[t]?.getter??"")),this.selectedGroupingFields=[...this.selectedGroupingFields]):0===n.length&&"remove-group"===t&&this.clearGroupingSelects()}showPreHeader(){this.gridObj.setPreHeaderPanelVisibility(!0)}setFiltersDynamically(){this.aureliaGrid.filterService.updateFilters([{columnId:"percentComplete",operator:">=",searchTerms:["55"]},{columnId:"cost",operator:"<",searchTerms:["80"]}])}setSortingDynamically(){this.aureliaGrid.sortService.updateSorting([{columnId:"percentComplete",direction:"ASC"}])}toggleDraggableGroupingRow(){this.clearGroupsAndSelects(),this.gridObj.setTopHeaderPanelVisibility(!this.gridObj.getOptions().showTopHeaderPanel)}toggleDarkMode(){this._darkMode=!this._darkMode,this.toggleBodyBackground(),this.aureliaGrid.slickGrid?.setOptions({darkMode:this._darkMode})}toggleBodyBackground(){this._darkMode?(document.querySelector(".panel-wm-content").classList.add("dark-mode"),document.querySelector("#demo-container").dataset.bsTheme="dark"):(document.querySelector(".panel-wm-content").classList.remove("dark-mode"),document.querySelector("#demo-container").dataset.bsTheme="light")}toggleSubTitle(){this.hideSubTitle=!this.hideSubTitle;const e=this.hideSubTitle?"add":"remove";document.querySelector(".subtitle")?.classList[e]("hidden"),this.aureliaGrid.resizerService.resizeGrid(0)}},a=t,"symbol"==typeof(s="Example18")&&(s=s.description?"[".concat(s.description,"]"):""),Object.defineProperty(a,"name",{configurable:!0,value:l?"".concat(l," ",s):s}),(()=>{const r="function"==typeof Symbol&&Symbol.metadata?Object.create(null):void 0;b(null,e={value:t},n,{kind:"class",name:t.name,metadata:r},null,i),t=e.value,r&&Object.defineProperty(t,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:r}),function(e,t,n){for(var r=arguments.length>2,o=0;o<t.length;o++)n=r?t[o].call(e,n):t[o].call(e)}(t,i)})(),t;var a,s,l})()}}]);