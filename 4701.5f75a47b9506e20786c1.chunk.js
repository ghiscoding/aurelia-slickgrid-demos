"use strict";(self.webpackChunkau_slickgrid_demo=self.webpackChunkau_slickgrid_demo||[]).push([[4701],{3940:(t,e,n)=>{function i(t,e,n=!0){const i=Math.random()*(e-t+1)+t;return n?Math.floor(i):i}function a(t){const e=parseInt(t,10);return e<10?`0${e}`:e}n.d(e,{R:()=>i,c:()=>a})},4701:(t,e,n)=>{n.r(e),n.d(e,{Example40:()=>b});var i={};n.r(i),n.d(i,{bindables:()=>d,default:()=>l,dependencies:()=>o,name:()=>r,register:()=>u,template:()=>s});var a=n(5394);const r="example40",s='<div class="demo40">\n  <h2>\n    Example 40: Infinite Scroll from JSON data\n    <span class="float-end">\n      <a\n        style="font-size: 18px"\n        target="_blank"\n        href="https://github.com/ghiscoding/slickgrid-universal/blob/master/demos/aurelia/src/examples/slickgrid/example40.ts"\n      >\n        <span class="mdi mdi-link-variant"></span> code\n      </a>\n    </span>\n    <button\n      class="ms-2 btn btn-outline-secondary btn-sm btn-icon"\n      type="button"\n      data-test="toggle-subtitle"\n      click.trigger="toggleSubTitle()"\n    >\n      <span class="mdi mdi-information-outline" title="Toggle example sub-title details"></span>\n    </button>\n  </h2>\n\n  <div class="subtitle">\n    <ul>\n      <li>\n        Infinite scrolling allows the grid to lazy-load rows from the server when reaching the scroll bottom (end) position. In its simplest\n        form, the more the user scrolls down, the more rows get loaded.\n      </li>\n      <li>\n        NOTES: <code>presets.pagination</code> is not supported with Infinite Scroll and will revert to the first page, simply because since\n        we keep appending data, we always have to start from index zero (no offset).\n      </li>\n    </ul>\n  </div>\n\n  <div class="row">\n    <div class="col-sm-12">\n      <button\n        class="btn btn-outline-secondary btn-sm btn-icon"\n        data-test="clear-filters-sorting"\n        click.trigger="clearAllFiltersAndSorts()"\n        title="Clear all Filters & Sorts"\n      >\n        <span class="mdi mdi-close"></span>\n        <span>Clear all Filter & Sorts</span>\n      </button>\n      <button class="btn btn-outline-secondary btn-sm" data-test="set-dynamic-filter" click.trigger="setFiltersDynamically()">\n        Set Filters Dynamically\n      </button>\n      <button class="btn btn-outline-secondary btn-sm" data-test="set-dynamic-sorting" click.trigger="setSortingDynamically()">\n        Set Sorting Dynamically\n      </button>\n      <button class="btn btn-outline-secondary btn-sm" data-test="group-by-duration" click.trigger="groupByDuration()">\n        Group by Duration\n      </button>\n\n      <label class="ml-4">Reset Dataset <code>onSort</code>:</label>\n      <button class="btn btn-outline-secondary btn-sm" data-test="onsort-on" click.trigger="onSortReset(true)">ON</button>\n      <button class="btn btn-outline-secondary btn-sm" data-test="onsort-off" click.trigger="onSortReset(false)">OFF</button>\n    </div>\n  </div>\n\n  <div show.bind="metrics" class="mt-2" style="margin: 10px 0px">\n    <b>Metrics:</b>\n    <span>\n      <span>${metrics.endTime | dateFormat: \'DD MMM, h:mm:ss a\'}</span> â€”\n      <span data-test="totalItemCount">${metrics.totalItemCount}</span>\n      items\n    </span>\n  </div>\n\n  <aurelia-slickgrid\n    grid-id="grid40"\n    columns.bind="columnDefinitions"\n    options.bind="gridOptions"\n    dataset.bind="dataset"\n    instances.bind="aureliaGrid"\n    on-aurelia-grid-created.trigger="aureliaGridReady($event.detail)"\n    on-row-count-changed.trigger="handleOnRowCountChanged($event.detail.args)"\n    on-sort.trigger="handleOnSort()"\n    on-scroll.trigger="handleOnScroll($event.detail.args)"\n  >\n  </aurelia-slickgrid>\n</div>\n',l=s,o=[],d={};let c;function u(t){c||(c=a.K9.define({name:r,template:s,dependencies:o,bindables:d})),t.register(c)}var m=n(6407),p=n(5895),h=n(3940),g=(n(6757),function(t,e,n,i,a,r){function s(t){if(void 0!==t&&"function"!=typeof t)throw new TypeError("Function expected");return t}for(var l,o=i.kind,d="getter"===o?"get":"setter"===o?"set":"value",c=!e&&t?i.static?t:t.prototype:null,u=e||(c?Object.getOwnPropertyDescriptor(c,i.name):{}),m=!1,p=n.length-1;p>=0;p--){var h={};for(var g in i)h[g]="access"===g?{}:i[g];for(var g in i.access)h.access[g]=i.access[g];h.addInitializer=function(t){if(m)throw new TypeError("Cannot add initializers after decoration has completed");r.push(s(t||null))};var b=(0,n[p])("accessor"===o?{get:u.get,set:u.set}:u[d],h);if("accessor"===o){if(void 0===b)continue;if(null===b||"object"!=typeof b)throw new TypeError("Object expected");(l=s(b.get))&&(u.get=l),(l=s(b.set))&&(u.set=l),(l=s(b.init))&&a.unshift(l)}else(l=s(b))&&("field"===o?a.unshift(l):u[d]=l)}c&&Object.defineProperty(c,i.name,u),m=!0});let b=(()=>{let t,e,n=[(0,a.EM)(i)],r=[];return e=class{constructor(){this.dataset=[],this.hideSubTitle=!1,this.shouldResetOnSort=!1,this.defineGrid(),this.dataset=this.loadData(0,50),this.metrics={itemCount:50,totalItemCount:50}}aureliaGridReady(t){this.aureliaGrid=t}defineGrid(){this.columnDefinitions=[{id:"title",name:"Title",field:"title",sortable:!0,minWidth:100,filterable:!0},{id:"duration",name:"Duration (days)",field:"duration",sortable:!0,minWidth:100,filterable:!0,type:"number"},{id:"percentComplete",name:"% Complete",field:"percentComplete",sortable:!0,minWidth:100,filterable:!0,type:"number"},{id:"start",name:"Start",field:"start",type:"date",outputType:"dateIso",formatter:p._tQ.date,exportWithFormatter:!0,params:{dateFormat:"MMM DD, YYYY"},sortable:!0,filterable:!0,filter:{model:p.CuW.compoundDate}},{id:"finish",name:"Finish",field:"finish",type:"date",outputType:"dateIso",formatter:p._tQ.date,exportWithFormatter:!0,params:{dateFormat:"MMM DD, YYYY"},sortable:!0,filterable:!0,filter:{model:p.CuW.compoundDate}},{id:"effort-driven",name:"Effort Driven",field:"effortDriven",sortable:!0,minWidth:100,filterable:!0,formatter:p._tQ.checkmarkMaterial}],this.gridOptions={autoResize:{container:"#demo-container",rightPadding:10},enableAutoResize:!0,enableFiltering:!0,enableGrouping:!0,editable:!1,rowHeight:33,enableExcelExport:!0,externalResources:[new m.N]}}handleOnScroll(t){const e=t.grid.getViewportNode();if(["mousewheel","scroll"].includes(t.triggeredBy||"")&&e.scrollTop>0&&Math.ceil(e.offsetHeight+t.scrollTop)>=t.scrollHeight){console.log("onScroll end reached, add more items");const t=this.aureliaGrid.dataView?.getItemCount()||0,e=this.loadData(t,50);this.aureliaGrid.dataView?.addItems(e)}}handleOnSort(){if(this.shouldResetOnSort){const t=this.loadData(0,50);this.aureliaGrid.slickGrid?.scrollTo(0),this.aureliaGrid.dataView?.setItems(t),this.aureliaGrid.dataView?.reSort()}}groupByDuration(){this.aureliaGrid?.dataView?.setGrouping({getter:"duration",formatter:t=>`Duration: ${t.value} <span class="text-green">(${t.count} items)</span>`,comparer:(t,e)=>p.Luy.numeric(t.value,e.value,p.Lo1.asc),aggregators:[new p.J2q.Avg("percentComplete"),new p.J2q.Sum("cost")],aggregateCollapsed:!1,lazyTotalsCalculation:!0}),this.aureliaGrid?.slickGrid?.setSortColumns([{columnId:"duration",sortAsc:!0}]),this.aureliaGrid?.slickGrid?.invalidate()}loadData(t,e){const n=[];for(let i=t;i<t+e;i++)n.push(this.newItem(i));return n}newItem(t){return{id:t,title:"Task "+t,duration:Math.round(100*Math.random())+"",percentComplete:(0,h.R)(1,12),start:new Date(2020,(0,h.R)(1,11),(0,h.R)(1,28)),finish:new Date(2022,(0,h.R)(1,11),(0,h.R)(1,28)),effortDriven:t%5==0}}onSortReset(t){this.shouldResetOnSort=t}clearAllFiltersAndSorts(){this.aureliaGrid?.gridService&&this.aureliaGrid.gridService.clearAllFiltersAndSorts()}setFiltersDynamically(){this.aureliaGrid?.filterService.updateFilters([{columnId:"start",searchTerms:["2020-08-25"],operator:"<="}])}handleOnRowCountChanged(t){this.aureliaGrid&&t?.current>=0&&(this.aureliaGrid.dataView?.reSort(),this.metrics.itemCount=this.aureliaGrid.dataView?.getFilteredItemCount()||0,this.metrics.totalItemCount=t.itemCount||0)}setSortingDynamically(){this.aureliaGrid?.sortService.updateSorting([{columnId:"title",direction:"DESC"}])}toggleSubTitle(){this.hideSubTitle=!this.hideSubTitle;const t=this.hideSubTitle?"add":"remove";document.querySelector(".subtitle")?.classList[t]("hidden"),this.aureliaGrid.resizerService.resizeGrid(0)}},s=e,"symbol"==typeof(l="Example40")&&(l=l.description?"[".concat(l.description,"]"):""),Object.defineProperty(s,"name",{configurable:!0,value:o?"".concat(o," ",l):l}),(()=>{const i="function"==typeof Symbol&&Symbol.metadata?Object.create(null):void 0;g(null,t={value:e},n,{kind:"class",name:e.name,metadata:i},null,r),e=t.value,i&&Object.defineProperty(e,Symbol.metadata,{enumerable:!0,configurable:!0,writable:!0,value:i}),function(t,e,n){for(var i=arguments.length>2,a=0;a<e.length;a++)n=i?e[a].call(t,n):e[a].call(t)}(e,r)})(),e;var s,l,o})()}}]);